ctmc

//write the constant and variables

const double fr =0.05; //Disks Failure Rate
const double rr; //Disks Repair Rate
const double rrdc;  //Data Centre Repair Rate
const double df=0.0001; //Data Centre Failure Rate

module SE1A1

ss: [0..4] init 4; //Disks can take upto 4 states in 17/20 coding
dc: [0..2] init 2; //Data Centre can take upto 2 states in 3/4 coding

[fail1](dc=2 & ss=4) ->4*df :(dc'=1) + 20*fr : (ss'= 3); 
[fail2](dc=2 & ss=3) ->4*df :(dc'=1) + 19*fr : (ss'= 2); 
[fail3](dc=2 & ss=2) ->4*df :(dc'=1) + 18*fr : (ss'= 1); 
[fail4](dc=2 & ss=1) ->4*df :(dc'=1) + 17*fr : (ss'= 0); 

[fail5](dc=1 & ss=4) ->3*df :(dc'=0) + 20*fr : (ss'= 3); 
[fail6](dc=1 & ss=3) ->3*df :(dc'=0) + 19*fr : (ss'= 2); 
[fail7](dc=1 & ss=2) ->3*df :(dc'=0) + 18*fr : (ss'= 1); 
[fail8](dc=1 & ss=1) ->3*df :(dc'=0) + 17*fr : (ss'= 0); 


[repair1] (dc=2 & ss=3) -> 1*rr : (ss'=4); 
[repair2] (dc=2 & ss=2) -> 2*rr : (ss'=3); 
[repair3] (dc=2 & ss=1) -> 3*rr : (ss'=2);


[repair4] (dc=1 & ss=3) -> 1*rr : (ss'=4) + 1*rrdc:(dc'=2);
[repair5] (dc=1 & ss=2) -> 2*rr : (ss'=3) + 1*rrdc:(dc'=2);
[repair6] (dc=1 & ss=1) -> 3*rr : (ss'=2) + 1*rrdc:(dc'=2);

[repair7] (dc=1 & ss=4) -> 1*rrdc :(dc'=2);

[fail9](dc=2 & ss>0) ->1*df : (ss'= 0); 
[fail10](dc=1 & ss>0) ->1*df : (ss'= 0); 

endmodule

